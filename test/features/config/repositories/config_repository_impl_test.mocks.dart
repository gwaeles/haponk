// Mocks generated by Mockito 5.0.10 from annotations
// in haponk/test/features/config/repositories/config_repository_impl_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;

import 'package:dio/src/headers.dart' as _i4;
import 'package:dio/src/options.dart' as _i5;
import 'package:dio/src/redirect_record.dart' as _i9;
import 'package:dio/src/response.dart' as _i3;
import 'package:flutter_secure_storage/flutter_secure_storage.dart' as _i6;
import 'package:haponk/core/hass/datasources/hass_api.dart' as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:retrofit/dio.dart' as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: comment_references
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeHttpResponse<T> extends _i1.Fake implements _i2.HttpResponse<T> {}

class _FakeResponse<T> extends _i1.Fake implements _i3.Response<T> {
  @override
  String toString() => super.toString();
}

class _FakeHeaders extends _i1.Fake implements _i4.Headers {
  @override
  String toString() => super.toString();
}

class _FakeRequestOptions extends _i1.Fake implements _i5.RequestOptions {}

class _FakeUri extends _i1.Fake implements Uri {
  @override
  String toString() => super.toString();
}

/// A class which mocks [FlutterSecureStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockFlutterSecureStorage extends _i1.Mock
    implements _i6.FlutterSecureStorage {
  MockFlutterSecureStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<void> write(
          {String? key,
          String? value,
          _i6.IOSOptions? iOptions = _i6.IOSOptions.defaultOptions,
          _i6.AndroidOptions? aOptions,
          _i6.LinuxOptions? lOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#write, [], {
            #key: key,
            #value: value,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i7.Future<void>);
  @override
  _i7.Future<String?> read(
          {String? key,
          _i6.IOSOptions? iOptions = _i6.IOSOptions.defaultOptions,
          _i6.AndroidOptions? aOptions,
          _i6.LinuxOptions? lOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#read, [], {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions
          }),
          returnValue: Future<String?>.value()) as _i7.Future<String?>);
  @override
  _i7.Future<bool> containsKey(
          {String? key,
          _i6.IOSOptions? iOptions = _i6.IOSOptions.defaultOptions,
          _i6.AndroidOptions? aOptions,
          _i6.LinuxOptions? lOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#containsKey, [], {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions
          }),
          returnValue: Future<bool>.value(false)) as _i7.Future<bool>);
  @override
  _i7.Future<void> delete(
          {String? key,
          _i6.IOSOptions? iOptions = _i6.IOSOptions.defaultOptions,
          _i6.AndroidOptions? aOptions,
          _i6.LinuxOptions? lOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#delete, [], {
            #key: key,
            #iOptions: iOptions,
            #aOptions: aOptions,
            #lOptions: lOptions
          }),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i7.Future<void>);
  @override
  _i7.Future<Map<String, String>> readAll(
          {_i6.IOSOptions? iOptions = _i6.IOSOptions.defaultOptions,
          _i6.AndroidOptions? aOptions,
          _i6.LinuxOptions? lOptions}) =>
      (super.noSuchMethod(
              Invocation.method(#readAll, [], {
                #iOptions: iOptions,
                #aOptions: aOptions,
                #lOptions: lOptions
              }),
              returnValue:
                  Future<Map<String, String>>.value(<String, String>{}))
          as _i7.Future<Map<String, String>>);
  @override
  _i7.Future<void> deleteAll(
          {_i6.IOSOptions? iOptions = _i6.IOSOptions.defaultOptions,
          _i6.AndroidOptions? aOptions,
          _i6.LinuxOptions? lOptions}) =>
      (super.noSuchMethod(
          Invocation.method(#deleteAll, [],
              {#iOptions: iOptions, #aOptions: aOptions, #lOptions: lOptions}),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future.value()) as _i7.Future<void>);
}

/// A class which mocks [HassApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockHassApi extends _i1.Mock implements _i8.HassApi {
  MockHassApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<_i2.HttpResponse<dynamic>> checkHealth() =>
      (super.noSuchMethod(Invocation.method(#checkHealth, []),
              returnValue: Future<_i2.HttpResponse<dynamic>>.value(
                  _FakeHttpResponse<dynamic>()))
          as _i7.Future<_i2.HttpResponse<dynamic>>);
  @override
  _i7.Future<_i2.HttpResponse<dynamic>> discoveryInfo() =>
      (super.noSuchMethod(Invocation.method(#discoveryInfo, []),
              returnValue: Future<_i2.HttpResponse<dynamic>>.value(
                  _FakeHttpResponse<dynamic>()))
          as _i7.Future<_i2.HttpResponse<dynamic>>);
}

/// A class which mocks [HttpResponse].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpResponse<T> extends _i1.Mock implements _i2.HttpResponse<T> {
  MockHttpResponse() {
    _i1.throwOnMissingStub(this);
  }

  @override
  T get data =>
      (super.noSuchMethod(Invocation.getter(#data), returnValue: null) as T);
  @override
  _i3.Response<dynamic> get response =>
      (super.noSuchMethod(Invocation.getter(#response),
          returnValue: _FakeResponse<dynamic>()) as _i3.Response<dynamic>);
}

/// A class which mocks [Response].
///
/// See the documentation for Mockito's code generation for more information.
class MockResponse<T> extends _i1.Mock implements _i3.Response<T> {
  MockResponse() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set data(T? _data) => super.noSuchMethod(Invocation.setter(#data, _data),
      returnValueForMissingStub: null);
  @override
  _i4.Headers get headers => (super.noSuchMethod(Invocation.getter(#headers),
      returnValue: _FakeHeaders()) as _i4.Headers);
  @override
  set headers(_i4.Headers? _headers) =>
      super.noSuchMethod(Invocation.setter(#headers, _headers),
          returnValueForMissingStub: null);
  @override
  _i5.RequestOptions get requestOptions =>
      (super.noSuchMethod(Invocation.getter(#requestOptions),
          returnValue: _FakeRequestOptions()) as _i5.RequestOptions);
  @override
  set requestOptions(_i5.RequestOptions? _requestOptions) =>
      super.noSuchMethod(Invocation.setter(#requestOptions, _requestOptions),
          returnValueForMissingStub: null);
  @override
  set statusCode(int? _statusCode) =>
      super.noSuchMethod(Invocation.setter(#statusCode, _statusCode),
          returnValueForMissingStub: null);
  @override
  set statusMessage(String? _statusMessage) =>
      super.noSuchMethod(Invocation.setter(#statusMessage, _statusMessage),
          returnValueForMissingStub: null);
  @override
  Map<String, dynamic> get extra =>
      (super.noSuchMethod(Invocation.getter(#extra),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  set extra(Map<String, dynamic>? _extra) =>
      super.noSuchMethod(Invocation.setter(#extra, _extra),
          returnValueForMissingStub: null);
  @override
  List<_i9.RedirectRecord> get redirects =>
      (super.noSuchMethod(Invocation.getter(#redirects),
          returnValue: <_i9.RedirectRecord>[]) as List<_i9.RedirectRecord>);
  @override
  set redirects(List<_i9.RedirectRecord>? _redirects) =>
      super.noSuchMethod(Invocation.setter(#redirects, _redirects),
          returnValueForMissingStub: null);
  @override
  set isRedirect(bool? _isRedirect) =>
      super.noSuchMethod(Invocation.setter(#isRedirect, _isRedirect),
          returnValueForMissingStub: null);
  @override
  Uri get realUri =>
      (super.noSuchMethod(Invocation.getter(#realUri), returnValue: _FakeUri())
          as Uri);
  @override
  String toString() => super.toString();
}
